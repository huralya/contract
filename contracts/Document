# Huralya Smart Contract Documentation

## Overview

The Huralya smart contract is an ERC20 token contract developed in Solidity `0.8.23`. It integrates OpenZeppelin's ERC20 standard and Ownable2Step for access control. This contract creates and manages the Huralya (LYA) token, with specific minting and burning features.

## Features

### 1. Token Information
   - **Name:** Huralya
   - **Symbol:** LYA
   - **Decimals:** 6

### 2. Minting Mechanics
   - **Initial Mint:** 100 million LYA tokens are minted to the contract owner at deployment.
   - **Mint Interval:** Additional minting is allowed after 4 years, as defined by `MINT_INTERVAL`.
   - **Maximum Supply:** The maximum number of LYA tokens is capped at 200 million.
   - **Mint Timestamp:** The next eligible minting time is tracked by `MINT_TIMESTAP`.

### 4. Ownership Management
   - Utilizes OpenZeppelin's `Ownable2Step` for enhanced ownership control and transfer mechanisms.

## Constructor
- The constructor sets up the initial minting and initializes the `MINT_TIMESTAP` for future minting.

## Functions

### `burn(uint256 _amount)`
- **Purpose:** Allows users to destroy (burn) their LYA tokens.
- **Parameters:** `_amount` - The amount of LYA to be burned.
- **Accessibility:** External

### `mint()`
- **Purpose:** Mints new LYA tokens based on predefined conditions.
- **Conditions:** 
  - Current time must be equal to or beyond `MINT_TIMESTAP`.
  - Total supply must be less than `MAX_SUPPLY`.
- **Action:** Mints 100 million LYA tokens to the owner.
- **Accessibility:** External, OnlyOwner

## Conclusion

The Huralya smart contract introduces a token with controlled minting intervals and a fixed supply cap, aiming to offer a predictable and secure token economy. Its use of OpenZeppelin libraries ensures standard compliance and enhances security. 
